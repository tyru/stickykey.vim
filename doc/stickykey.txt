*stickykey.txt*		You don't need press very far away meta keys

Version: 0.0.0
Author : tyru <tyru.exe@gmail.com>
License: Under the same license as Vim itself (see :help license)


==============================================================================
CONTENS						*stickykey-contents*

Introduction		|stickykey-introduction|
Interface			|stickykey-interface|
  Keymappings		|stickykey-mappings|
  Variables			|stickykey-variables|
Changelog			|stickykey-changelog|


==============================================================================
INTRODUCTION					*stickykey-introduction* {{{

This plugin provides Sticky Key to you.
With Sticky Key, you can emulate <C-o> by ";o".
(In this case, <Plug>(stickykey-ctrl) is mapped to ";")

And I suppose you are using GNU screen :)
Inputting screen's hotkey is a little complicated.
But you can send key input to screen fastly, certainly, and easily.

In this document:
- I use "sticky key" for the key emulating sequential input.
- I use "stickykey" for this plugin.

}}}
==============================================================================
INTERFACE					*stickykey-interface* {{{
------------------------------------------------------------------------------
MAPPINGS							*stickykey-mappings* {{{

<Plug>(stickykey-...-remap) works like recursive mapping.


<Plug>(stickykey-ctrl)
<Plug>(stickykey-ctrl-remap)
	Sticky key for |ctrl|.

<Plug>(stickykey-alt)
<Plug>(stickykey-alt-remap)
	Sticky key for |alt|.

<Plug>(stickykey-shift)
<Plug>(stickykey-shift-remap)
	Sticky key for |shift|.

<Plug>(stickykey-command)
<Plug>(stickykey-command-remap)
	Sticky key for Macintosh command key. (see |<D-|)

}}}
------------------------------------------------------------------------------
VARIABLES						*stickykey-variables* {{{

g:stickykey_when_no_escaped_key			string (default: "thru")
	This variables determines when stickykey can not find
	escaped input with meta key.
	For e.g., while waiting the next key after pressing
	"<Plug>(stickykey-ctrl)", <C-o> is input.
	This variable can be any one of those:
		"nop":
			Behave like no key is input.
		"thru":
			Execute key without escaping with meta key.
		"again":
			Dispose current key input, wait next input again.
		"input" (Experimental):
			If input key is pressed with any modifier keys,
			return the input directly.
			for example, stickeykey was
			invoked by <Plug>(stickykey-shift),
			and input is <C-a>, return <C-a>.
		"mapping" (Experimental):
			If input key is pressed with any modifier keys,
			see invoked <Plug> key.
			for example, stickeykey was
			invoked by <Plug>(stickykey-shift),
			and input is <C-a>, return <S-a>.

}}}
}}}
==============================================================================
Changelog					*stickykey-changelog* {{{

See git-log and www.vim.org release notes :)

}}}
==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl:noet:fdm=marker:fen
